Company Feuji

Here are the questions with answers and question numbers:

1.Suppose your microservices are increasing, how do you scale horizontally or vertically?

Horizontal Scaling: Add more instances of the microservices to distribute the load. This can be done by increasing the number of Pods in Kubernetes or scaling the service in a cloud environment.
Vertical Scaling: Increase the resources (CPU, memory) allocated to each instance of the microservice. This involves adjusting resource requests and limits in Kubernetes or resizing instances in the cloud.


2.How did you decide what should be the loads and how did you distribute your CPU and network load?

Load Decisions: Analyze historical data, performance metrics, and expected growth to determine load requirements. Tools like Prometheus or CloudWatch can help in monitoring and forecasting.
Distribution: Use load balancers to distribute network traffic across multiple instances. For CPU and memory, use autoscaling groups or Kubernetes Horizontal Pod Autoscalers to adjust resources based on metrics like CPU utilization or memory usage.

3.How were your infra pipeline and application pipeline configured and different? How did you use to trigger them?

Infra Pipeline: Configured using tools like Terraform or CloudFormation to manage infrastructure provisioning and changes. Triggered manually or via version control changes.
Application Pipeline: Configured using CI/CD tools like Jenkins or GitLab CI to build, test, and deploy applications. Triggered by code commits, pull requests, or scheduled jobs.


4.Was the SonarQube scan report automated? If so, how did you read the output and pass/fail the build?

Yes, SonarQube scan reports were automated using CI/CD pipelines. After a scan, the results were read through SonarQube's API or web interface. Build pass/fail was determined based on quality gate thresholds configured in SonarQube. If the quality gate failed, the build was marked as failed in the CI/CD pipeline.

5.Have you set up a CDN?

Yes, I have set up a CDN, such as AWS CloudFront, to distribute content globally and reduce latency. The CDN caches static content at edge locations to deliver it quickly to users.


6.What network concepts are you aware of, and was the configuring of ACLs and NACLs done by your network team or you?

Network Concepts: Subnets, VPCs, NAT Gateways, Security Groups, ACLs, NACLs, and DNS.
Configuration: In some cases, network teams handle ACLs and NACLs, but I have also configured them as part of infrastructure provisioning, especially when using IaC tools like Terraform.


7.Suppose an already created cluster is having performance issues. How do you troubleshoot it and optimize it?

Troubleshooting: Check cluster metrics and logs using tools like Prometheus and Grafana. Analyze resource utilization, Pod status, and node health.
Optimization: Optimize resource allocation by adjusting requests and limits, scaling Pods or nodes, and optimizing application performance. Consider upgrading hardware or reconfiguring the cluster for better performance.


8.How did you convince your management to go with Kafka bus? Did you give your design views or follow your architect's instructions?

I presented a detailed analysis of Kafka's benefits, such as its scalability, fault tolerance, and support for real-time data streaming. This included use cases, cost analysis, and comparison with alternatives. I also worked closely with architects to ensure alignment with the overall design and architecture strategy.


9. Have you fired or been forced to fire a person from your team? How did you handle this situation?

Handling such a situation requires a professional and empathetic approach. It involves documenting performance issues, having clear and honest discussions, and following company policies. Ensuring a smooth transition and offering support for the individual, such as career counseling or severance, is also important.


10. How were your test stages configured, how were the automated test results interpreted, and what was the criteria to pass or fail this step?

Test Stages: Configured to include unit tests, integration tests, and end-to-end tests in the CI/CD pipeline.
Automated Test Results: Interpreted using test reports and metrics generated by testing tools. Failures triggered notifications and often led to build failure.
Criteria: Defined in the test scripts and quality gates, such as a percentage of test coverage or a maximum number of allowable test failures.


11.There is already a DevOps toolchain used; what would be your approach to analyze and propose a cost-effective approach?

Analyze current tool usage, costs, and effectiveness. Identify any overlaps, inefficiencies, or underutilized tools. Propose alternatives or optimizations, such as consolidating tools or switching to more cost-effective solutions. Present a detailed cost-benefit analysis to management.


12. How do you propose the new solution to your management, and how do you convince them?

Prepare a comprehensive proposal including the problem statement, proposed solution, benefits, cost analysis, and implementation plan. Use data and case studies to support your arguments. Communicate clearly and address any potential concerns or risks. Engage with stakeholders to gather feedback and build support for the proposal.